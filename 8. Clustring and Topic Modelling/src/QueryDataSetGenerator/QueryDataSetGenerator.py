###############################################################################################################
# Given a queryId, get document text for all relevant docs (Merge bm25 docs with relevant docs for a query)
# Files generated by this script will be input for TopicModelProcessor to generate DOc-Term matrix.
# Generate a file with Queryid to List of all relevant documents.
# Generate a file with QueryId to to List of tuple (documentId, documentText) for each query
###############################################################################################################
import os, sys, pickle, re
print os.curdir
from sets import Set

currDirPath = os.path.abspath(os.curdir)
os.chdir("..")
srcDirPath =  os.path.abspath(os.curdir)

sys.path.append(srcDirPath +"/Resource")
sys.path.append(srcDirPath+"/ElasticSearchManager")

import Resource
from ElasticSearchManager import ElasticSearchManager

import Resource
###############################################################################################################
class QueryDataSetGenerator:
    def __init__(self, qIdToRelDocIdsMapFilePath, allQueryIdsFilePath, bm25FilePath, qrelAdhocFilePath,
                 indexName, docTypeName, qIdToDocumentsTextMapFilePath):
        # [51,60,83]
        self._all_queryIds_list = []
        self._all_queryIds_list = self.__GetAllQueryIds__(allQueryIdsFilePath)
        print "Program is running for # %d queries\n" % len( self._all_queryIds_list)
        # print sorted(self._all_queryIds_list)
        # ---------------------------------------------------------------
        # {
        #     '51' : ['AP891124-0007','AP8954124-4537',...],
        #     '60' : ['AP891124-0007','AP8954124-4539',...]
        #     '83' : ['AP891124-0007','AP8954124-4536',...]
        # }
        self._qId_to_docId_list_for_qrel = {}
        self._qrelAdhocFilePath = qrelAdhocFilePath
        # ---------------------------------------------------------------
        #  {
        #     '51' : ['AP891124-0007','AP8954124-4538',...],
        #     '60' : ['AP891124-0007','AP8954124-4532',...]
        #     '83' : ['AP891124-0007','AP8954124-4536',...]
        # }
        self._qId_to_docId_list_fir_bm25 = []
        self._bm25FilePath = bm25FilePath
        # --------------------------------------------------------------
        print "Merging document Ids for all queries..."
        #  {
        #     '51' : ['AP891124-0007','AP8954124-4537','AP8954124-4538...],
        #     '60' : ['AP891124-0007','AP8954124-4539','AP8954124-4532,...]
        #     '83' : ['AP891124-0007','AP8954124-4536',...]
        # }
        self._qId_to_docIds_for_Merged = {}
        self._qIdToRelDocIdsMapFilePath = qIdToRelDocIdsMapFilePath
        # --------------------------------------------------------------
        self._elasticSearchMgrObject = ElasticSearchManager(indexName, docTypeName, 0)
        # -------------------------------------------------------------
        # {
        #     'AP-43':[
        #               ("AP85-101","Text from First document for AP-43"),
        #               ("AP85-101", "Text from second document for AP-43")
        #             ],
        #     'AP-100':[
        #               ("AP85-101","Text from First document for AP-43"),
        #               ("AP85-101", "Text from second document for AP-43")
        #             ],
        #     ....
        #     'AP-99':[
        #               ("AP85-101","Text from First document for AP-43"),
        #               ("AP85-101", "Text from second document for AP-43")
        #             ],
        # }
        self._qid_to_documentsTextList_Map = {}
        self._QIdToDocumentsTextFilePath = qIdToDocumentsTextMapFilePath
   ###############################################################################################################
    def __GetAllQueryIds__(self,filePathForAllQueryIds):
        qIds = []
        with open(filePathForAllQueryIds,'r') as handle:
            for line in handle:
                qId =  int(line.strip())
                qIds.append(qId)

        return qIds

    ###############################################################################################################
    def __LoadQIdToDocIdsMapForBM25__(self):
         self._qId_to_docId_list_fir_bm25 = self.__GetQIdToDocIdsMapForBm25__(self._all_queryIds_list, self._bm25FilePath)
        # print sorted(self._qId_to_docId_list_fir_bm25)

    ###############################################################################################################
    def __GetQIdToDocIdsMapForBm25__(self, allQIds, filePathForBm25):
        print "For OkapiBM25 - fetching QId-To-DocIds-Map  ... from file (%s) " % filePathForBm25
        qIdToDocIdMap = {}
        with open(filePathForBm25, 'r') as handle:
            for line in handle:
                qId, _, docId, _, _, _ = line.strip().split()
                qId = int(qId)

                if not qId in allQIds:
                    continue

                if not qIdToDocIdMap.has_key(qId):
                    qIdToDocIdMap[qId] = []

                qIdToDocIdMap[qId].append(docId)

        print "Total # of Queries from BM25 loaded -> %d\n" % len(qIdToDocIdMap)
        return qIdToDocIdMap

    ###############################################################################################################
    def __LoadQIdToDocIdsMapForQrel__(self):
        self._qId_to_docId_list_for_qrel = self.__GetQIdToDocIdsMapForQrelFile__(self._all_queryIds_list, self._qrelAdhocFilePath)

    ###############################################################################################################
    def __GetQIdToDocIdsMapForQrelFile__(self, allQIds, filePathFoeQrel):
        print "For Qrel file - fetching QId-To-DocIds-Map ... from Qrel file (%s) " %filePathFoeQrel
        qIdToDocIdMap = {}
        with open(filePathFoeQrel, 'r') as handle:
            for line in handle:
                qId, _, docId, labelValue = line.strip().split()
                qId = int(qId)

                if not (qId in allQIds or int(labelValue) == 1):
                    continue

                if not qIdToDocIdMap.has_key(qId):
                    qIdToDocIdMap[qId] = []

                qIdToDocIdMap[qId].append(docId)

        print "Total # of Queries from Qrel file loaded -> %d\n" % len(qIdToDocIdMap)
        return qIdToDocIdMap

    ###############################################################################################################
    def __LoadMergedQIdToDocIds__(self):
        print "Merging BM25 documents with Qrel documents.."
        self._qId_to_docIds_for_Merged = self.__GetMergedDocIdsForAllQueries__(self._all_queryIds_list,
                                                                               self._qId_to_docId_list_fir_bm25,
                                                                               self._qId_to_docId_list_for_qrel)

    ###############################################################################################################
    def __GetMergedDocIdsForAllQueries__(self, allQIds, qIdToDocIdMapForBM25, qIdToDocIdMapForQrel):
        mergedQIdToDocIdsMap = {}
        i = 0
        for qrelId in allQIds:
            i += 1
            mergedQIdToDocIdsMap[qrelId] = list(Set(qIdToDocIdMapForBM25[qrelId] + qIdToDocIdMapForQrel[qrelId]))
            print i, "qrelId",qrelId, ", # Bm25",len(qIdToDocIdMapForBM25[qrelId]), ", # Qrel",len(qIdToDocIdMapForQrel[qrelId]), ", Merged #",len(mergedQIdToDocIdsMap[qrelId])
        return mergedQIdToDocIdsMap

    def __DumpMergedQIdToDocIdsToPkl__(self):
        print "\nDumping merged file ...."
        self.__DumpToPkl__(self._qId_to_docIds_for_Merged, self._qIdToRelDocIdsMapFilePath)

    ##############################################################################################################
    def __GetTextForAllDocsForAllQId__(self):
        print "Fetching RawDocument data for all qIds..."
        i = 0
        for qId in self._all_queryIds_list:
            i += 1
            print i, "For qId %d : Fetching text for all documents and appending to _qid_to_documentsTextList_Map map ..."
            if not self._qid_to_documentsTextList_Map.has_key(qId):
                 self._qid_to_documentsTextList_Map[qId] = []

            for docId in self._qId_to_docIds_for_Merged[qId]:
                docText = self.__GetTextForADoc__(docId)
                self._qid_to_documentsTextList_Map[qId].append((docId,docText))
            print "Total # documents fetched -> %d" %len(self._qid_to_documentsTextList_Map[qId])

    def __GetTextForADoc__(self, docId):
        documentText = self._elasticSearchMgrObject.__GetDocumentText__(docId)
        textWithoutSmallWOrds =  re.sub(r'\b\w{1,4}\b', '', documentText)
        return textWithoutSmallWOrds

    def __DumpQIdTpDocIdsToPkl__(self):
        self.__DumpToPkl__(self._qid_to_documentsTextList_Map, self._QIdToDocumentsTextFilePath)

    ###############################################################################################################
    def __DumpToPkl__(self, data, filePath):
        with open(filePath, 'w') as handle:
            pickle.dump(data, handle)
        print "File saved. Location -> %s\n" % filePath
###############################################################################################################
# Run in Python2.7.6 or Python2.7.9
obj = QueryDataSetGenerator(Resource.QIdToRelDocIdsMapFilePath,
                             Resource.AllQueryIdsFilePath,
                             Resource.bm25FilePath,
                             Resource.QrelAdhocFilePath,
                             Resource.INDEX_NAME,
                             Resource.TYPE_NAME,
                             Resource.QIdToDocumentsTextMapFilePath)

obj.__LoadQIdToDocIdsMapForBM25__() # Load - self._qId_to_docId_list_fir_bm25
obj.__LoadQIdToDocIdsMapForQrel__() # Load - self._qId_to_docId_list_for_qrel
obj.__LoadMergedQIdToDocIds__() # Load -  self._qId_to_docIds_for_Merged
obj.__DumpMergedQIdToDocIdsToPkl__()

obj.__GetTextForAllDocsForAllQId__() # Load - self._qid_to_documentsTextList_Map
obj.__DumpQIdTpDocIdsToPkl__()