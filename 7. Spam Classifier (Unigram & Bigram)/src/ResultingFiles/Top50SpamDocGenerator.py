######################################################################
# PRECONDITION - Before running this script, /output/final MUST have 'predicted result file'
# (test_data_predicted.txt) generated by liblinear after executing liblinear-predict command.
#  /output/final directory
# 1. Load for default values
# 2. Load Dictionaries for predicted scores and labels
# 3. Sort EmailIds based on the scores
# 4. Sorted emails are written into file ("/final/top_50_span_emails.txt") with
#   S.No-EmailId-Score-RealLabelValue-PredictedLabelValue.
######################################################################
import os, sys
print os.curdir
import pickle

currDirPath = os.path.abspath(os.curdir)
os.chdir("..")
srcDirPath =  os.path.abspath(os.curdir)

sys.path.append(srcDirPath +"/Resource")

import Resource

#################################################################
class Top50SpamDocGenerator:
    def __init__(self, uniPredictionForTestData, top50SpamDocFilePath):
        self._uniPredictionForTestData = uniPredictionForTestData
        self._Top50SpamDocFilePath = top50SpamDocFilePath

        # --------------- Load List with default labels ------------------------------------
        # [('inmail.2', 0, 0), ('inmail.6', 1, 1), ('inmail.12', 2, 1), ('inmail.16', 3, 1), ('inmail.21', 4, 0)]
        self._default_emailId_To_SnoCommaLabel = []
        self._default_emailId_To_SnoCommaLabel = self.__LoadRealEmailIdToSnoCommaLabelList__(Resource.UniTestEmailIdToSnoCommaLabelFilePath)

        # ---------------- Load Dictionaries for predicted scores and labels -----------------------------------
        # {
        #     'inmail.10' : 0.3,
        #     'inmail.511' : 0.500
        # }
        self._emailId_To_Score_Map = {}

        # {
        #     'inmail.10' : (0,0),
        #     'inmail.51' : (1,1)
        # }
        self._emailId_To_DefLabelCommaPredLabel = {}

        self._emailId_To_Score_Map, \
        self._emailId_To_DefLabelCommaPredLabel = self.__LoadDictionariesForEmailIdToScoreAndPredictedLabel__(
            uniPredictionForTestData,
            self._default_emailId_To_SnoCommaLabel)

        # ---------------- Sort based on dictionaries and write top 50 Spams --------------

        self.__DumpRealAndPredictedLabels__( self._emailId_To_Score_Map,
                                             self._emailId_To_DefLabelCommaPredLabel,
                                             self._Top50SpamDocFilePath)

    def __DumpRealAndPredictedLabels__(self,emailId_To_Score_Map, emailId_To_DefLabelCommaPredLabel, fp):
        print "Sorting data based on the score predicted by liblinear model..."
        emailIdCommaScoreList = sorted(emailId_To_Score_Map.items(), key=lambda x: x[1], reverse=True)

        handle = open(fp,'w')
        i = 0
        counterForTop50 = 0
        for emailId, score in emailIdCommaScoreList:
            i += 1
            realLabel, predictedLabel =  emailId_To_DefLabelCommaPredLabel[emailId]
            if i <= 50 and realLabel == predictedLabel:
                counterForTop50 += 1

            if not realLabel != predictedLabel:
                print i

            line =  str(i) + " " + emailId + " " + str(score) + " " +  str(realLabel) + " " + str(predictedLabel) + "\n"
            handle.write(line)

            if i == 50:
                break

        print "File saved. Top50SpamDocProcessor generated at location ->", fp + "\n"
        print "Accuracy for top 50 documents : ",((100*counterForTop50)/float(50)), "%"

    def __LoadDictionariesForEmailIdToScoreAndPredictedLabel__(self, predictedDataFilePath, real_emailId_To_SnoCommaLabel):
        print "Loadding emailIdToScore based on the predicted labels...."
        # {
        #     'inmail.10' : 0.3,
        #     'inmail.511' : 0.500
        # }
        emailIdToScore = {}

        print "Loadding emailIdToDefaultCommaPredictedLabel based on the predicted labels....\n",
        # {
        #     'inmail.10' : (0,0),
        #     'inmail.51' : (1,1)
        # }
        emailIdToDefaultCommaPredictedLabel = {}

        with open(predictedDataFilePath,'r') as handle:
            i = -2
            for line in handle:
                i += 1
                if i == -1:
                    continue
                emailIdFromDef, snoFromDef, labelFromDef =  real_emailId_To_SnoCommaLabel[i]

                labelFromPred, spamScoreFromPred, hamScoreFromPred = line.split(' ')

                emailIdToScore[emailIdFromDef] = float(spamScoreFromPred)
                emailIdToDefaultCommaPredictedLabel[emailIdFromDef] = (int(labelFromPred), int(labelFromDef))

        return emailIdToScore, emailIdToDefaultCommaPredictedLabel

    def __LoadRealEmailIdToSnoCommaLabelList__(self, fp):
        print "Loading  self._default_emailId_To_SnoCommaLabel list with default labels(Real)..\n"
        emailIdToSnoCommaLabel = {}
        with open(fp, 'r') as handle:
            emailIdToSnoCommaLabel = pickle.load(handle)

        return emailIdToSnoCommaLabel

#####################################################################################
# Uncomment following line to run this script
obj = Top50SpamDocGenerator(Resource.UniPredictionForTestData, Resource.Top50SpamDocFilePath)


