######################################################################
# PRECONDITION - Before running this script, /output/final MUST have 'model file'
# (model.txt) generated by liblinear after executing liblinear-train on train-matrix.
# 1. Load all featureId list (from model.txt)
# 2. Load all featuresIdsToNameMapping, which was generated while creating sparse matrix
# 3. Sort coefficients, and dump SNo-featureId-featureName into 'top_50_span_terms.txt'
######################################################################################

import os, sys, pickle
print os.curdir

currDirPath = os.path.abspath(os.curdir)
os.chdir("..")
srcDirPath =  os.path.abspath(os.curdir)

sys.path.append(srcDirPath +"/Resource")
sys.path.append(srcDirPath+"/ElasticSearchManager")

import Resource

#####################################################################
class Top50SpamTermsGenerator:
    def __init__(self, trainedModelFilePath, featureNameToIdMapFilePath, top50SpamTermsFilePath ):
        # -------------Load all featureId list (from model.txt)-------------------------------
        self._predicted_featureIdToScoreMap = self.__Load__(trainedModelFilePath)

        # -------------Load all featuresIdsToNameMapping------------------------------
        self._featureName_to_Id_map = {}
        self._featureName_to_Id_map = self.__LoadFeatures__(featureNameToIdMapFilePath)
        print len(self._predicted_featureIdToScoreMap), len(self._featureName_to_Id_map)

        # -------------S---------------------------
        self.__WriteTopSpamTerms__(self._predicted_featureIdToScoreMap, self._featureName_to_Id_map, top50SpamTermsFilePath)
        # --------------------------------------------------

    def __WriteTopSpamTerms__(self, predicted_featureIdToScoreMap,featureName_to_Id_map,fp):
        with open(fp, 'w') as handle:
            sortedPredictedMap = sorted(predicted_featureIdToScoreMap.items(), key=lambda x: x[1], reverse=True)

            i = 0
            for featureId, score in sortedPredictedMap:
                i += 1
                aLine = str(i) + " " + str(featureId) + " " +featureName_to_Id_map[featureId] + "\n"
                handle.write(aLine)

    def __LoadFeatures__(self, filePath):
        print "Loading Feature Id to Feature Name mapping.."
        featureIdToNameMap = {}
        with open(filePath, 'r') as handle:
            for line in handle:
                key, index = line.split()
                featureIdToNameMap[int(index)] = str(key)
        return featureIdToNameMap

    def __Load__(self, fp):
        print "Loading  self._default_emailId_To_SnoCommaLabel list with default labels(Real)..\n"
        featureIdToCoefficientScore = {}
        with open(fp, 'r') as handle:
            i = 0
            for line in handle:
                i += 1
                if i <= 6:
                    continue

                featureId = i - 6
                coefficientValue = float(line.strip())
                featureIdToCoefficientScore[featureId] = coefficientValue

        return featureIdToCoefficientScore

################################################################
# Uncomment following line to run this script
obj = Top50SpamTermsGenerator(Resource.TrainedModelFilePath, Resource.FeatureNameToIdMapFilePath, Resource.Top50SpamTermsFilePath)